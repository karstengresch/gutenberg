"use strict";(self.webpackChunkgutenberg=self.webpackChunkgutenberg||[]).push([[408],{"./packages/components/src/popover/stories/index.story.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AllPlacements:()=>AllPlacements,Default:()=>Default,DynamicHeight:()=>DynamicHeight,Unstyled:()=>Unstyled,WithSlotOutsideIframe:()=>WithSlotOutsideIframe,__namedExportsOrder:()=>__namedExportsOrder,default:()=>index_story});var react=__webpack_require__("./node_modules/react/index.js"),src_button=__webpack_require__("./packages/components/src/button/index.tsx"),popover=__webpack_require__("./packages/components/src/popover/index.tsx"),react_dom=__webpack_require__("./node_modules/react-dom/index.js"),slot_fill=__webpack_require__("./packages/components/src/slot-fill/index.js"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const GenericIframe=({children,...props})=>{const[containerNode,setContainerNode]=(0,react.useState)();return(0,jsx_runtime.jsx)("iframe",{...props,title:"My Iframe",srcDoc:"<!doctype html><html><body></body></html>",onLoad:event=>{event.currentTarget.contentDocument&&setContainerNode(event.currentTarget.contentDocument.body)},children:containerNode&&(0,react_dom.createPortal)(children,containerNode)})};GenericIframe.displayName="GenericIframe";const PopoverInsideIframeRenderedInExternalSlot=props=>{const[anchorRef,setAnchorRef]=(0,react.useState)(null);return(0,jsx_runtime.jsxs)(slot_fill.zt,{children:[(0,jsx_runtime.jsx)(popover.ZP.Slot,{name:"my-slot"}),(0,jsx_runtime.jsx)(GenericIframe,{style:{width:"100%",height:"400px",border:"0",outline:"1px solid purple"},children:(0,jsx_runtime.jsxs)("div",{style:{height:"200vh",paddingTop:"10vh"},children:[(0,jsx_runtime.jsx)("p",{style:{padding:"8px",background:"salmon",maxWidth:"200px",marginTop:"100px",marginLeft:"auto",marginRight:"auto"},ref:setAnchorRef,children:"Popover's anchor"}),(0,jsx_runtime.jsx)(popover.ZP,{...props,__unstableSlotName:"my-slot",anchor:anchorRef})]})})]})};PopoverInsideIframeRenderedInExternalSlot.displayName="PopoverInsideIframeRenderedInExternalSlot";try{PopoverInsideIframeRenderedInExternalSlot.displayName="PopoverInsideIframeRenderedInExternalSlot",PopoverInsideIframeRenderedInExternalSlot.__docgenInfo={description:"",displayName:"PopoverInsideIframeRenderedInExternalSlot",props:{children:{defaultValue:null,description:"The `children` elements rendered as the popover's content.",name:"children",required:!0,type:{name:"ReactNode"}},animate:{defaultValue:{value:"true"},description:"Whether the popover should animate when opening.",name:"animate",required:!1,type:{name:"boolean"}},offset:{defaultValue:null,description:"The distance (in px) between the anchor and the popover.",name:"offset",required:!1,type:{name:"number"}},anchor:{defaultValue:null,description:"The element that should be used by the popover as its anchor. It can either\nbe an `Element` or, alternatively, a `VirtualElement` â€” ie. an object with\nthe `getBoundingClientRect()` and the `ownerDocument` properties defined.\n\n**The anchor element should be stored in local state** rather than a\nplain React ref to ensure reactive updating when it changes.",name:"anchor",required:!1,type:{name:"Element | VirtualElement"}},inline:{defaultValue:{value:"false"},description:"Whether to render the popover inline or within the slot.",name:"inline",required:!1,type:{name:"boolean"}},variant:{defaultValue:{value:"undefined"},description:"Specifies the popover's style.\n\nLeave undefined for the default style. Other values are:\n- 'unstyled':  The popover is essentially without any visible style, it\n               has no background, border, outline or drop shadow, but\n               the popover contents are still displayed.\n- 'toolbar':   A style that has no elevation, but a high contrast with\n               other elements. This is matches the style of the\n               `Toolbar` component.",name:"variant",required:!1,type:{name:"enum",value:[{value:'"toolbar"'},{value:'"unstyled"'}]}},onClose:{defaultValue:null,description:"A callback invoked when the popover should be closed.",name:"onClose",required:!1,type:{name:"() => void"}},position:{defaultValue:null,description:"Legacy way to specify the popover's position with respect to its anchor.\n_Note: this prop is deprecated. Use the `placement` prop instead._",name:"position",required:!1,type:{name:"enum",value:[{value:'"middle"'},{value:'"bottom"'},{value:'"top"'},{value:'"middle left"'},{value:'"middle center"'},{value:'"middle right"'},{value:'"bottom left"'},{value:'"bottom center"'},{value:'"bottom right"'},{value:'"top left"'},{value:'"top center"'},{value:'"top right"'},{value:'"middle left left"'},{value:'"middle left right"'},{value:'"middle left bottom"'},{value:'"middle left top"'},{value:'"middle center left"'},{value:'"middle center right"'},{value:'"middle center bottom"'},{value:'"middle center top"'},{value:'"middle right left"'},{value:'"middle right right"'},{value:'"middle right bottom"'},{value:'"middle right top"'},{value:'"bottom left left"'},{value:'"bottom left right"'},{value:'"bottom left bottom"'},{value:'"bottom left top"'},{value:'"bottom center left"'},{value:'"bottom center right"'},{value:'"bottom center bottom"'},{value:'"bottom center top"'},{value:'"bottom right left"'},{value:'"bottom right right"'},{value:'"bottom right bottom"'},{value:'"bottom right top"'},{value:'"top left left"'},{value:'"top left right"'},{value:'"top left bottom"'},{value:'"top left top"'},{value:'"top center left"'},{value:'"top center right"'},{value:'"top center bottom"'},{value:'"top center top"'},{value:'"top right left"'},{value:'"top right right"'},{value:'"top right bottom"'},{value:'"top right top"'}]}},resize:{defaultValue:{value:"true"},description:"Adjusts the size of the popover to prevent its contents from going out of\nview when meeting the viewport edges.",name:"resize",required:!1,type:{name:"boolean"}},shift:{defaultValue:{value:"false"},description:"Enables the `Popover` to shift in order to stay in view when meeting the\nviewport edges.",name:"shift",required:!1,type:{name:"boolean"}},__unstableSlotName:{defaultValue:{value:"'Popover'"},description:"The name of the Slot in which the popover should be rendered. It should\nbe also passed to the corresponding `PopoverSlot` component.",name:"__unstableSlotName",required:!1,type:{name:"string"}},expandOnMobile:{defaultValue:null,description:"Show the popover fullscreen on mobile viewports.",name:"expandOnMobile",required:!1,type:{name:"boolean"}},flip:{defaultValue:{value:"true"},description:"Specifies whether the popover should flip across its axis if there isn't\nspace for it in the normal placement.\nWhen the using a 'top' placement, the popover will switch to a 'bottom'\nplacement. When using a 'left' placement, the popover will switch to a\n`right' placement.\nThe popover will retain its alignment of 'start' or 'end' when flipping.",name:"flip",required:!1,type:{name:"boolean"}},focusOnMount:{defaultValue:{value:"'firstElement'"},description:'By default, the _first tabbable element_ in the popover will receive focus\nwhen it mounts. This is the same as setting this prop to `"firstElement"`.\nSpecifying a `false` value disables the focus handling entirely (this\nshould only be done when an appropriately accessible substitute behavior\nexists).',name:"focusOnMount",required:!1,type:{name:'boolean | "firstElement"'}},onFocusOutside:{defaultValue:null,description:"A callback invoked when the focus leaves the opened popover. This should\nonly be provided in advanced use-cases when a popover should close under\nspecific circumstances (for example, if the new `document.activeElement`\nis content of or otherwise controlling popover visibility).\n\nWhen not provided, the `onClose` callback will be called instead.",name:"onFocusOutside",required:!1,type:{name:"(event: SyntheticEvent<Element, Event>) => void"}},headerTitle:{defaultValue:null,description:"Used to customize the header text shown when the popover is toggled to\nfullscreen on mobile viewports (see the `expandOnMobile` prop).",name:"headerTitle",required:!1,type:{name:"string"}},noArrow:{defaultValue:{value:"true"},description:"Used to show/hide the arrow that points at the popover's anchor.",name:"noArrow",required:!1,type:{name:"boolean"}},placement:{defaultValue:{value:"'bottom-start'"},description:"Used to specify the popover's position with respect to its anchor.",name:"placement",required:!1,type:{name:"enum",value:[{value:'"left"'},{value:'"right"'},{value:'"bottom"'},{value:'"top"'},{value:'"left-end"'},{value:'"left-start"'},{value:'"right-end"'},{value:'"right-start"'},{value:'"bottom-end"'},{value:'"bottom-start"'},{value:'"top-end"'},{value:'"top-start"'},{value:'"overlay"'}]}},__unstableForcePosition:{defaultValue:null,description:"Prevent the popover from flipping and resizing when meeting the viewport\nedges. _Note: this prop is deprecated. Instead, provide use the individual\n`flip` and `resize` props._\n@deprecated",name:"__unstableForcePosition",required:!1,type:{name:"boolean"}},anchorRect:{defaultValue:null,description:"An object extending a `DOMRect` with an additional optional `ownerDocument`\nproperty, used to specify a fixed popover position.\n@deprecated",name:"anchorRect",required:!1,type:{name:"DomRectWithOwnerDocument"}},anchorRef:{defaultValue:null,description:"Used to specify a fixed popover position. It can be an `Element`, a React\nreference to an `element`, an object with a `top` and a `bottom` properties\n(both pointing to elements), or a `range`.\n@deprecated",name:"anchorRef",required:!1,type:{name:"Element | PopoverAnchorRefReference | PopoverAnchorRefTopBottom | Range"}},getAnchorRect:{defaultValue:null,description:"A function returning the same value as the one expected by the `anchorRect`\nprop, used to specify a dynamic popover position.\n@deprecated",name:"getAnchorRect",required:!1,type:{name:"(fallbackReferenceElement: Element) => DomRectWithOwnerDocument"}},isAlternate:{defaultValue:null,description:"Used to enable a different visual style for the popover.\n_Note: this prop is deprecated. Use the `variant` prop with the\n'toolbar' value instead._\n@deprecated",name:"isAlternate",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/components/src/popover/test/utils/index.tsx#PopoverInsideIframeRenderedInExternalSlot"]={docgenInfo:PopoverInsideIframeRenderedInExternalSlot.__docgenInfo,name:"PopoverInsideIframeRenderedInExternalSlot",path:"packages/components/src/popover/test/utils/index.tsx#PopoverInsideIframeRenderedInExternalSlot"})}catch(__react_docgen_typescript_loader_error){}const AVAILABLE_PLACEMENTS=["top","top-start","top-end","right","right-start","right-end","bottom","bottom-start","bottom-end","left","left-start","left-end","overlay"],index_story={title:"Components/Popover",component:popover.J2,argTypes:{anchor:{control:{type:null}},anchorRef:{control:{type:null}},anchorRect:{control:{type:null}},children:{control:{type:null}},focusOnMount:{control:{type:"select"},options:["firstElement",!0,!1]},getAnchorRect:{control:{type:null}},onClose:{action:"onClose"},onFocusOutside:{action:"onFocusOutside"},__unstableSlotName:{control:{type:null}}},parameters:{sourceLink:"packages/components/src/popover",controls:{expanded:!0}}},PopoverWithAnchor=args=>{const anchorRef=(0,react.useRef)(null);return(0,jsx_runtime.jsxs)("div",{style:{height:"200px",display:"flex",justifyContent:"center",alignItems:"center"},children:[(0,jsx_runtime.jsx)("p",{style:{padding:"8px",background:"salmon"},ref:anchorRef,children:"Popover's anchor"}),(0,jsx_runtime.jsx)(popover.J2,{...args,anchorRef})]})};PopoverWithAnchor.displayName="PopoverWithAnchor";const Template=args=>{const[isVisible,setIsVisible]=(0,react.useState)(!1),buttonRef=(0,react.useRef)();return(0,react.useEffect)((()=>{buttonRef.current?.scrollIntoView?.({block:"center",inline:"center"})}),[]),(0,jsx_runtime.jsx)("div",{style:{width:"300vw",height:"300vh",display:"flex",alignItems:"center",justifyContent:"center"},children:(0,jsx_runtime.jsxs)(src_button.ZP,{variant:"secondary",onClick:()=>{setIsVisible((state=>!state))},ref:buttonRef,children:["Toggle Popover",isVisible&&(0,jsx_runtime.jsx)(popover.J2,{...args})]})})};Template.displayName="Template";const Default=Template.bind({});Default.args={children:(0,jsx_runtime.jsx)("div",{style:{width:"280px",whiteSpace:"normal"},children:"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."})};const Unstyled=Template.bind({});Unstyled.args={children:(0,jsx_runtime.jsx)("div",{style:{width:"280px",whiteSpace:"normal"},children:"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."}),variant:"unstyled"};const AllPlacements=({children,...args})=>(0,jsx_runtime.jsxs)("div",{style:{minWidth:"600px",marginLeft:"auto",marginRight:"auto"},children:[(0,jsx_runtime.jsx)("h2",{children:"Resize / scroll the viewport to test the behavior of the popovers when they reach the viewport boundaries."}),(0,jsx_runtime.jsx)("div",{children:AVAILABLE_PLACEMENTS.map((p=>(0,jsx_runtime.jsxs)(PopoverWithAnchor,{placement:p,...args,resize:"overlay"===p||args.resize,children:[children,(0,jsx_runtime.jsx)("div",{children:(0,jsx_runtime.jsxs)("small",{children:["(placement: ",p,")"]})})]},p)))})]});AllPlacements.displayName="AllPlacements",AllPlacements.parameters={controls:{exclude:["placement","position"]}},AllPlacements.args={...Default.args,children:(0,jsx_runtime.jsx)("div",{style:{width:"280px",whiteSpace:"normal"},children:"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."}),noArrow:!1,offset:10,resize:!1,flip:!1};const DynamicHeight=({children,...args})=>{const[height,setHeight]=(0,react.useState)(200);return(0,jsx_runtime.jsxs)("div",{style:{padding:"20px"},children:[(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(src_button.ZP,{variant:"primary",onClick:()=>setHeight(height+100),style:{marginRight:"20px"},children:"Increase Size"}),(0,jsx_runtime.jsx)(src_button.ZP,{variant:"primary",onClick:()=>setHeight(height-100),children:"Decrease Size"})]}),(0,jsx_runtime.jsx)("p",{children:"When the height of the popover exceeds the available space in the canvas, a scrollbar inside the popover should appear."}),(0,jsx_runtime.jsx)("div",{children:(0,jsx_runtime.jsx)(popover.J2,{...args,children:(0,jsx_runtime.jsx)("div",{style:{height,background:"#eee",padding:"20px"},children})})})]})};DynamicHeight.displayName="DynamicHeight",DynamicHeight.args={...Default.args,children:"Content with dynamic height"};const WithSlotOutsideIframe=args=>(0,jsx_runtime.jsx)(PopoverInsideIframeRenderedInExternalSlot,{...args});WithSlotOutsideIframe.displayName="WithSlotOutsideIframe",WithSlotOutsideIframe.args={...Default.args},Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"args => {\n  const [isVisible, setIsVisible] = useState(false);\n  const toggleVisible = () => {\n    setIsVisible(state => !state);\n  };\n  const buttonRef = useRef<HTMLButtonElement | undefined>();\n  useEffect(() => {\n    buttonRef.current?.scrollIntoView?.({\n      block: 'center',\n      inline: 'center'\n    });\n  }, []);\n  return <div style={{\n    width: '300vw',\n    height: '300vh',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }}>\n            <Button variant=\"secondary\" onClick={toggleVisible} ref={buttonRef}>\n                Toggle Popover\n                {isVisible && <Popover {...args} />}\n            </Button>\n        </div>;\n}",...Default.parameters?.docs?.source}}},Unstyled.parameters={...Unstyled.parameters,docs:{...Unstyled.parameters?.docs,source:{originalSource:"args => {\n  const [isVisible, setIsVisible] = useState(false);\n  const toggleVisible = () => {\n    setIsVisible(state => !state);\n  };\n  const buttonRef = useRef<HTMLButtonElement | undefined>();\n  useEffect(() => {\n    buttonRef.current?.scrollIntoView?.({\n      block: 'center',\n      inline: 'center'\n    });\n  }, []);\n  return <div style={{\n    width: '300vw',\n    height: '300vh',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }}>\n            <Button variant=\"secondary\" onClick={toggleVisible} ref={buttonRef}>\n                Toggle Popover\n                {isVisible && <Popover {...args} />}\n            </Button>\n        </div>;\n}",...Unstyled.parameters?.docs?.source}}},AllPlacements.parameters={...AllPlacements.parameters,docs:{...AllPlacements.parameters?.docs,source:{originalSource:"({\n  children,\n  ...args\n}) => <div style={{\n  minWidth: '600px',\n  marginLeft: 'auto',\n  marginRight: 'auto'\n}}>\n        <h2>\n            Resize / scroll the viewport to test the behavior of the popovers\n            when they reach the viewport boundaries.\n        </h2>\n        <div>\n            {AVAILABLE_PLACEMENTS.map(p => <PopoverWithAnchor key={p} placement={p} {...args} resize={p === 'overlay' ? true : args.resize}>\n                    {children}\n                    <div>\n                        <small>(placement: {p})</small>\n                    </div>\n                </PopoverWithAnchor>)}\n        </div>\n    </div>",...AllPlacements.parameters?.docs?.source}}},DynamicHeight.parameters={...DynamicHeight.parameters,docs:{...DynamicHeight.parameters?.docs,source:{originalSource:"({\n  children,\n  ...args\n}) => {\n  const [height, setHeight] = useState(200);\n  const increase = () => setHeight(height + 100);\n  const decrease = () => setHeight(height - 100);\n  return <div style={{\n    padding: '20px'\n  }}>\n            <div>\n                <Button variant=\"primary\" onClick={increase} style={{\n        marginRight: '20px'\n      }}>\n                    Increase Size\n                </Button>\n\n                <Button variant=\"primary\" onClick={decrease}>\n                    Decrease Size\n                </Button>\n            </div>\n\n            <p>\n                When the height of the popover exceeds the available space in\n                the canvas, a scrollbar inside the popover should appear.\n            </p>\n\n            <div>\n                <Popover {...args}>\n                    <div style={{\n          height,\n          background: '#eee',\n          padding: '20px'\n        }}>\n                        {children}\n                    </div>\n                </Popover>\n            </div>\n        </div>;\n}",...DynamicHeight.parameters?.docs?.source}}},WithSlotOutsideIframe.parameters={...WithSlotOutsideIframe.parameters,docs:{...WithSlotOutsideIframe.parameters?.docs,source:{originalSource:"args => {\n  return <PopoverInsideIframeRenderedInExternalSlot {...args} />;\n}",...WithSlotOutsideIframe.parameters?.docs?.source}}};const __namedExportsOrder=["Default","Unstyled","AllPlacements","DynamicHeight","WithSlotOutsideIframe"]}}]);