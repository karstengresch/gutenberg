"use strict";(self.webpackChunkgutenberg=self.webpackChunkgutenberg||[]).push([[243],{"./packages/components/src/scroll-lock/stories/index.story.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>__WEBPACK_DEFAULT_EXPORT__,Default:()=>Default,__namedExportsOrder:()=>__namedExportsOrder});var _wordpress_element__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/react/index.js"),_button__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./packages/components/src/button/index.tsx"),___WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./packages/components/src/scroll-lock/index.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={component:___WEBPACK_IMPORTED_MODULE_1__.Z,title:"Components/ScrollLock",parameters:{sourceLink:"packages/components/src/scroll-lock",controls:{hideNoControlsWarning:!0},docs:{canvas:{sourceState:"shown"}}}};function StripedBackground(props){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div",{style:{backgroundColor:"#fff",backgroundImage:"linear-gradient(transparent 50%, rgba(0, 0, 0, 0.05) 50%)",backgroundSize:"50px 50px",height:3e3,position:"relative"},...props})}function ToggleContainer(props){const{children}=props;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div",{style:{position:"sticky",top:0,padding:40,display:"flex",justifyContent:"center",textAlign:"center"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div",{children})})}StripedBackground.displayName="StripedBackground",ToggleContainer.displayName="ToggleContainer";const Default=()=>{const[isScrollLocked,setScrollLocked]=(0,_wordpress_element__WEBPACK_IMPORTED_MODULE_2__.useState)(!1);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div",{style:{height:1e3},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div",{style:{overflow:"auto",height:240,border:"1px solid lightgray"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(StripedBackground,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div",{children:["Start scrolling down. Once you scroll to the end of this container with the stripes, the rest of the page will continue scrolling. ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("code",{children:"ScrollLock"}),' prevents this "scroll bleed" from happening.']}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(ToggleContainer,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_button__WEBPACK_IMPORTED_MODULE_3__.ZP,{variant:"primary",onClick:()=>setScrollLocked(!isScrollLocked),children:"Toggle Scroll Lock"}),isScrollLocked&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.Z,{}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("p",{children:["Scroll locked:"," ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("strong",{children:isScrollLocked?"Yes":"No"})]})]})]})})})};Default.displayName="Default",Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"() => {\n  const [isScrollLocked, setScrollLocked] = useState(false);\n  const toggleLock = () => setScrollLocked(!isScrollLocked);\n  return <div style={{\n    height: 1000\n  }}>\n            <div style={{\n      overflow: 'auto',\n      height: 240,\n      border: '1px solid lightgray'\n    }}>\n                <StripedBackground>\n                    <div>\n                        Start scrolling down. Once you scroll to the end of this\n                        container with the stripes, the rest of the page will\n                        continue scrolling. <code>ScrollLock</code> prevents\n                        this &quot;scroll bleed&quot; from happening.\n                    </div>\n                    <ToggleContainer>\n                        <Button variant=\"primary\" onClick={toggleLock}>\n                            Toggle Scroll Lock\n                        </Button>\n                        {isScrollLocked && <ScrollLock />}\n                        <p>\n                            Scroll locked:{' '}\n                            <strong>{isScrollLocked ? 'Yes' : 'No'}</strong>\n                        </p>\n                    </ToggleContainer>\n                </StripedBackground>\n            </div>\n        </div>;\n}",...Default.parameters?.docs?.source}}};const __namedExportsOrder=["Default"]}}]);